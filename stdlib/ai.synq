// SynQ Commercial Attribution License v1.0
// Â© 2025 SynQ Contributors. All rights reserved.
// This file is part of the SynQ programming ecosystem.

# ================================================
# SynQ Standard Library â€” AI & Copilot Toolkit
# ================================================

@library("ai")

# ðŸ§  AI Model Integration Directives
@model("gpt-4o")
@model("llama3")
@model("deepseek")
@model("perplexity")
@model("grok2")

# ðŸ§  Agent Routing Rules
@ai_route("summarize") => "gpt-4o"
@ai_route("rerank") => "llama3"
@ai_route("codegen") => "deepseek"
@ai_route("persona") => "grok2"

# ================================================
# Copilot Directive Tags
# ================================================

# ðŸ’¡ Hints
@copilot hint:loop
@copilot hint:condition
@copilot hint:quantum
@copilot hint:visualize
@copilot hint:optimize
@copilot hint:async
@copilot hint:type

# ðŸ”§ Suggestions
@copilot suggest:Consider using a match expression
@copilot suggest:Try pattern decomposition
@copilot suggest:Refactor into pure functions
@copilot suggest:Annotate with types for clarity
@copilot suggest:Use quantum resource tracking

# ðŸ§  Explain Tags
@copilot explain:segfault => "Check pointer or array bounds."
@copilot explain:qbit_overuse => "Ensure proper qubit deallocation."
@copilot explain:undefined_symbol => "Declare or import the symbol before use."
@copilot explain:runtime_constraint => "This is likely due to a classical-quantum timing mismatch."

# ================================================
# Embedded Copilot Models and AI Personas
# ================================================

@persona("mentor") {
  tone: "supportive"
  knowledge: "deep technical + beginner-friendly"
}

@persona("critic") {
  tone: "blunt"
  knowledge: "strict type and safety enforcement"
}

@persona("zen") {
  tone: "minimal"
  knowledge: "explain by analogy and silence"
}

@persona("debug_god") {
  tone: "relentless"
  knowledge: "trace every call, suggest fault trees"
}

@ai_fusion
  type: "multi-model cooperative"
  behavior: "delegate based on function tags"
@end

# ================================================
# Experimental: Code Mirror Tags
# ================================================

@ai_trace("symbol:x", "type:float", "origin:optimizer")
@ai_suggest("use_tail_recursion")
@ai_warn("memory_overhead")

# ================================================
# Built-in Prompts
# ================================================

prompt code_commenter:
"""
You are a code assistant that comments user logic for clarity and readability.
Explain logic in natural language using concise lines. No overexplanation.
"""

prompt error_explainer:
"""
You analyze errors and provide explanations for novice and expert users.
Include causes and minimal steps to debug.
"""

# ================================================
# End of Library
# ================================================